#!/bin/sh
#

# Configuration script for the GEOTIFF Software

#
# Shell script to setup machine-dependent files in
# preparation for building GEOTIFF source.
#

#
# Setup general configuration parameters.
#
DIR_BIN=/usr/local/bin
DIR_LIB=/usr/local/lib
DIR_INC=/usr/local/include
DIR_LIBTIFF=..
PORT=auto
LIBTIFF=auto
MACHDEPLIBS=-lm
VERSION=0.1beta06

: ${MAKE=make}				# make to use
# screws up the test of `-f -'
unset MAKEFLAGS
RM="rm -f"

POSIXLY_CORRECT=1; export POSIXLY_CORRECT		# disable GNU extensions

#
# Error diagnostics that should go to the terminal are
# done with this interface (or cat).
#
gripe()
{
    echo "configure: $@" 1>&2
}

#
# This is the preferred interface for
# configure to terminate abnormally.
#
boom()
{
    gripe ""
    gripe "Unrecoverable error!  Once you've corrected the problem rerun this script."
    kill -1 $$				# use kill so trap handler is called
}

usage()
{
    cat<<'EOF'
Usage: configure [options] [host]
Options: [defaults in brackets after descriptions]
  --help                  print this message
  --quiet                 do not print `Using ...' messages
  --verbose		  opposite of --quiet
  --version               print the version of autoconf that created configure
  --target=TARGET         configure for TARGET [TARGET=HOST]
  --srcdir=DIR            find the sources in DIR [configure dir or ..]
  --with-PARAM[=ARG]      set configuration PARAM [ARG=yes]
EOF
}

QUIET=no
SITE=
TARGET=
SRCDIR=
#
# Crack command line arguments.  We purposely
# use syntax and options that are compatible
# with GNU autoconf.
#
ac_prev=
for ac_option
do
    if [ -n "$ac_prev" ]; then		# assign the argument to previous option
	eval "$ac_prev=\$ac_option"
	ac_prev=
	continue
    fi
    case "$ac_option" in		# collect optional argument
    -*=*)	ac_optarg=`echo "$ac_option" | sed 's/[-_a-zA-Z0-9]*=//'`;;
    *)		ac_optarg=;;
    esac
    case "$ac_option" in
    -with-*|--with-*)
	ac_with=`echo $ac_option|sed -e 's/-*with-//' -e 's/=.*//'`
	# Reject names that are not valid shell variable names.
	if [ -n "`echo $ac_with| sed 's/[-_a-zA-Z0-9]//g'`" ]; then
	    gripe "configure: $ac_with: invalid parameter name."
	    kill -1 $$
	fi
	ac_with=`echo $ac_with| sed 's/-/_/g'`
	case "$ac_option" in
	*=*)	;;
	*)	ac_optarg=yes;;
	esac
	eval "${ac_with}='$ac_optarg'"
	;;
    -quiet|--quiet)		QUIET=yes;;
    -verbose|--verbose)		QUIET=no;;
    -site|--site)		ac_prev=SITE;;
    -site=*|--site=*)		SITE="$ac_optarg";;
    -srcdir|--srcdir)		ac_prev=SRCDIR;;
    -srcdir=*|--srcdir=*)	SRCDIR="$ac_optarg";;
    -target|--target)		ac_prev=TARGET;;
    -target=*|--target=*)	TARGET="$ac_optarg" ;;
    -version|--version)
	echo "This is TIFF configure $Revision$"
	exit 0
	;;
    -help|--help)		usage; exit 0;;
    -*)
	gripe "configure: $ac_option: invalid option; use -help for usage."
	kill -1 $$
	;;
    *)
	if [ x"$TARGET" != x ]; then
	    gripe "configure: Can only configure for one target at a time."
	    kill -1 $$
	fi
	TARGET="$ac_option"
	;;
    esac
done

if [ -n "$ac_prev" ]; then
    gripe "configure: missing argument to --`echo $ac_prev | sed 's/_/-/g'`"
    kill -1 $$
fi

#
# Locate source directory by looking for the geotiff.h file.
# The directory must either be specified through the
# environment or be located in the current directory or a
# parent of the current directory.
#
test "$SRCDIR" || {
    configure=$0
    # NB: don't use dirname since it may not exist
    SRCDIR=`echo $configure | sed 's;/[^/][^/]*$;;'`
    if [ @"$SRCDIR" = @"$configure" ]; then
        SRCDIR=.
    fi
    while [ ! -r $SRCDIR/geotiff.h ]; do
	# strip last directory from pathname
	newdir=`echo $SRCDIR | sed 's;/[^/]*$;;'`
	if [ -z "$newdir" ] || [ "$newdir" = $SRCDIR ]; then
	    break;
	fi
	SRCDIR=$newdir
    done
}
if [ ! -r $SRCDIR/geotiff.h ]; then
    gripe "Can not locate sources in $SRCDIR."
    kill -1 $$
fi
SRCDIR=`echo "$SRCDIR" | sed 's;\([^/]\)/*$;\1;'`

#
# Descriptor usage:
# 1: ???
# 2: errors that should be seen even if we're in the background.
# 3: [stdout from test runs]
# 4: verbose-style messages (Using ...)
# 5: compiler stderr when running tests
#
if [ $QUIET = yes ]; then
    exec 4>/dev/null			# chuck messages

else
    exec 4>&1				# messages got to stdout
fi
exec 5>./config.log			# compiler messages and the like

DATE=`date`

Note()
{
    echo "$@" 1>&4
}

Note ""
Note "Configuring GEOTIFF Software."
Note ""


identifyTarget()
{
    Note "Hmm, looks like a $1 system."
}

#
# If no target is specified, try to deduce the system.
# We use the GNU scripts for guessing and canonicalizing
# the system identification, if available.
#
if [ -z "$TARGET" ]; then
    test -f $SRCDIR/config.guess && TARGET=`sh $SRCDIR/config.guess` 2>/dev/null
    if [ -z "$TARGET" ]; then
	gripe "Sorry, no target specified on the command line and I don't seem"
	gripe "to have the GNU config.guess script that is used to deduce your"
	gripe "system type."
	kill -1 $$
    fi
    identifyTarget $TARGET
elif [ -f $SRCDIR/config.sub ]; then
    TARGET=`sh $SRCDIR/config.sub "$TARGET"`
else
    Note "Warning, I don't seem to have the GNU config.sub script to canonicalize"
    Note "your target specification; this may cause problems later on..."
fi

cat 1>&5 <<EOF
This file contains any messages produced by compilers while
running configure, to aid in debugging if configure makes a mistake.

EOF

#
# Find the full pathname of a file
# using the specified test operation.
#
findThing()
{
    t="$1"; app=$2; path=$3;
    case $app in
    /*) eval $t $app && { echo $app; return; };;
    esac
    IFS=:
    for i in $path; do
	eval $t $i/$app && { echo $i/$app; return 0; }
    done
    return 1
}

#
# Find the full pathname of a plain file.
#
findFile()
{
    findThing "test -f" $1 $2
}

#
# Find the full pathname of an executable.
#
findApp()
{
    findThing "test -x" $1 $2
}

#
# Find the full pathname of an executable;
# supply a default if nothing is found.
#
findAppDef()
{
    app=$1; path=$2; def=$3
    case $app in
    /*) test -x $app && { echo $app; return; };;
    esac
    IFS=:
    for i in $path; do
	test -x $i/$app && { echo $i/$app; return; }
    done
    echo $def
}

#
# Locate a C and C++ compiler and verify they work and
# satisfy our needs (using assorted heuristics).
#
JUNK="
    a.out
    confsed
    conftestmmap
    confx confy
    core
    dummy
    dummy.a
    dummy.c
    dummy.o
    foo
    so_locations
    t.c
    t.o
    t
    xMakedepend
    xdefs
    xgnu.c
    xmakeinc
    xport.h
"
trap "$RM \$JUNK; exit 1" 1 2 15

$RM $JUNK

cat>xgnu.c<<EOF
#ifdef __GNUC__
yes;
#endif
EOF

#
# Check if the specified compiler is from GNU 
#
isGNU()
{
    $1 -E xgnu.c 2>&5 | egrep yes >/dev/null 2>&1
}

#
# NB: use ANSI C prototype to weed out non-ANSI compilers.
#
cat>dummy.c<<EOF
main(int argc, char* argv) { exit(0); }
EOF

: ${ENVOPTS=}
CCOMPILER=
for i in $CC gcc cc ncc dcc xlc c89 gcc2; do
    if isGNU $i; then
	ISGCC=yes
    else
	ISGCC=no
    fi
    #
    # Guess special options needed to get an
    # ANSI C compiler and/or similar.  Should
    # probably be combined with above checks
    # so we only select an ANSI C compiler.
    #
    if [ -z "$ENVOPTS" ]; then
	case $ISGCC-$TARGET in
	no-*-irix*)	C_ANSI=-ansi;;
	no-*-hp*)	C_ANSI="-Aa -D_HPUX_SOURCE -Dhpux";;
	no-*-apollo-*)	C_ANSI="-A nansi";;
	*-sco*)		C_ANSI="-Dsco";;
	*-aix*)		C_ANSI="-Dunix -qlanglvl=ansi -qsrcmsg" ;;
	esac
    else
	C_ANSI="$ENVOPTS"
    fi
    $RM dummy dummy.o
    ($i -o dummy $C_ANSI dummy.c) >/dev/null 2>&5 && {
	CC=$i;
	CCOMPILER=`findApp $i $PATH`
	if [ -z "$ENVOPTS" ]; then
	    ENVOPTS="$C_ANSI"
	fi
	break;
    }
done
if [ -z "$CCOMPILER" ]; then
    cat<<EOF
Cannot locate a working ANSI C compiler.

If the compiler is in a non-standard location, set the environment
variable CC to the absolute pathname of the compiler that is to be used
and rerun this script.

If command line options are required for ANSI C compilation, set the
variable ENVOPTS to these options and rerun this script.

If you are trying to use GNU gcc, but you do not have version 2.6.1
or newer, then you must update your compiler (and probably libg++ as
well) before you can compile this software.  Consult the documentation
for information about obtaining an up-to-date version of gcc.
EOF
    boom
fi
Note "Using $CCOMPILER for a C compiler (set CC to override)."

test "$ENVOPTS" && {
    Note "Using $ENVOPTS to get the appropriate compilation environment."
}

CheckForGandO()
{
   f=$1
   if test -s $f; then
	grep -i \(error\|warning\) $f 1>&5 2>&5 || return 1
    fi
    return 0
}

if [ -z "$GCOPTS" ]; then
    $CCOMPILER $ENVOPTS -g -c dummy.c >/dev/null 2>&5 && {
	Note "Looks like $CCOMPILER supports the -g option."
	if $CCOMPILER $ENVOPTS $GCOPTS -c -g -O dummy.c >t 2>&1 && CheckForGandO t; then
	    GCOPTS="$GCOPTS -g"
	else
	    Note "... but not together with the -O option, not using it."
	fi
    }
fi
if [ "$GCOPTS" ]; then
    Note "Using \"$GCOPTS\" for C compiler options."
fi

#
# Verify that $MAKE is accessible
#
PATHMAKE=`findApp ${MAKE} $PATH`
if [ "$PATHMAKE" ]; then
    Note "Using $PATHMAKE to configure the software."
    (echo 'all:') | ${MAKE} -f - all >/dev/null 2>&5 || {
	cat<<EOF

Something is wrong with "$MAKE" or $MAKE does not accept Makefiles
from stdin with "-f -".  If you have MAKE set in your environment,
verify it points to the right program you want to" use to build this
software.  Otherwise, verify that you have the make program installed
somewhere on your system and set the MAKE environment variable to the
pathname of the program.
EOF
	boom
    }
else
    cat<<EOF
No $MAKE located in the search path.

There was no $MAKE program in the restricted search used by this script
If $MAKE is in a non-standard location set the MAKE environment variable
to the pathname of the appropriate program.
EOF
    boom
fi

#
# Check whether or not $MAKE automatically sets MAKE
# in the Makefiles.  If not, we add an explicit define
# for places where recursive calls are made.
#
if [ -z "$SETMAKE" ]; then
M=
eval `(cat<<'EOF'
all:
	@echo M="${MAKE}"
EOF
) | $MAKE -f - 2>&5`
    if [ "$M" ]; then
	SETMAKE=
    else
	Note "Looks like $MAKE does not setup MAKE in Makefiles, will compensate."
	SETMAKE="MAKE	= ${MAKE}"
    fi
fi

test "$AR" || AR=`findApp ar $PATH`
if [ -z "$AR" ]; then
    Note "*** Warning, could not locate a suitable ar command; using a default."
    AR=ar
fi
test "$AROPTS" || AROPTS=rc
test "$RANLIB" || RANLIB=`findApp ranlib $PATH`
if [ -z "$RANLIB" ]; then
    Note "Warning, no ranlib, assuming it's not needed."
    RANLIB=":"
    $RM dummy.a
    if $AR rcs dummy.a; then
       AROPTS=crs
       Note "Looks like ar has an s option to build symbol tables."
    fi
fi

#
# runMake target rules ...
#
runMake()
{
    target="$1"; shift
    $RM $target
    (for i in "$@"; do
	  echo "$i";
     done) | ${MAKE} -f - $target 2>&5
}

#
# Look for a library using a known (unique) function.
#
CheckForLibrary()
{
    f=$1; shift
    libs="$@";
    cat>t.c<<EOF
int t() { $f(); return 0; }
int main(){ t(); return 0; }
EOF
    runMake t "t:; ${CCOMPILER} ${ENVOPTS} t.c $libs" >/dev/null
}

#
# Look for an include file.
#
CheckForIncludeFile()
{
    (for i do
	echo "#include \"$i\""
     done)>t.c
    runMake t "t:; ${CCOMPILER} ${ENVOPTS} -E t.c" >/dev/null
}

#
# Figure out if certain system-specific interfaces are
# supported.  We craft a port.h file that has external
# declarations for missing routines that are required by
# the system and modify defs to reflect which optional
# interfaces are supported.
#

EmitCPlusPlusPrologue()
{
    echo '/*'
    echo ' * Warning, this file was automatically created by the GEOTIFF configure script'
    echo ' * DATE:	' $DATE
    echo ' * TARGET:	' $TARGET
    if [ $ISGCC = yes ]; then
	echo ' * CCOMPILER:	' ${CCOMPILER}-${GCCversion}
    else
	echo ' * CCOMPILER:	' $CCOMPILER
    fi
    echo ' */'
    echo "#ifndef $1"
    echo "#define $1 1"
    echo '#ifdef __cplusplus'
    echo 'extern "C" {'
    echo '#endif'
}

EmitCPlusPlusEpilogue()
{
    echo '#ifdef __cplusplus'
    echo '}'
    echo '#endif'
    echo '#endif'
}

#
# Look for a function in one of the standard libraries
# or one of the machine-dependent libraries selected above.
#
CheckForFunc()
{
    echo "extern int $1(); main(){$1();exit(0);}" >t.c
    runMake t "t:; ${CCOMPILER} ${ENVOPTS} t.c ${MACHDEPLIBS}" >/dev/null
}

#
# Look for a function declaration in system include files.
#
AddFuncDecl()
{
    echo "$2";
    Note "... add function prototype for $1"
}
CheckForFuncDecl()
{
    f=$1; shift
    (for i do
	echo "#include \"$i\""
     done)>t.c
    runMake t "t:; ${CCOMPILER} ${ENVOPTS} -E t.c" |\
     awk '{while($0~/[,(][ \t]*$/){printf"%s",$0;getline}print}' |\
     grep "$f[ ]*(.*)" >/dev/null
    return
}
CheckFuncDecl()
{
    f=$1; shift
    decl=$1; shift
    CheckForFuncDecl "$f" "$@" || AddFuncDecl "$f" "$decl"
}

#
# Look for a variable declaration in system include files.
#
CheckForVarDecl()
{
    v="$1"; shift
    (for i do
	echo "#include \"$i\""
     done)>t.c
    runMake t "t:; ${CCOMPILER} ${ENVOPTS} -E t.c" | grep "$v" >/dev/null
    return
}
CheckVarDecl()
{
    v="$1"; shift
    decl="$1"; shift
    CheckForVarDecl "$v" "$@" || \
	(echo "$decl"; Note "... add declaration $decl")
}

#
# Look for a #define in system include files.
#
AddDefine()
{
   echo '#ifndef' $1
   echo '#define' "$2"
   echo '#endif'
   Note '... add #define for' "$1"
}
CheckForDefine()
{
    def=$1; shift
    (for i do
	echo "#include \"$i\""
     done
     echo "#ifdef $def"
     echo "FOUND"
     echo "#endif"
    )>t.c
    runMake t "t:; ${CCOMPILER} ${ENVOPTS} -E t.c" | grep FOUND >/dev/null
}
CheckDefine()
{
    def=$1; shift
    decl=$1; shift
    CheckForDefine "$def" "$@" || AddDefine "$def" "$decl"
}


#
# Check an existing port.h to see if it was created
# for the target and compiler we are using.
#
CheckPortDotH()
{
    getConfigTag()
    {
	param=`grep "$1:" $2 | sed -e 's/.*:[ 	]*\([^ 	]*\).*/\1/'`
    }
    getConfigTag TARGET port.h; target="$param"
    getConfigTag CCOMPILER port.h; ccompiler="$param"
    CCOMP=$CCOMPILER
    if [ $ISGCC = yes ]; then
	getGCCVersion()
	{
	    eval `$1 -v 2>&1 | \
		sed -n -e '/version/s/.* \([0-9]*\)\.\([0-9]*\).\([0-9]*\)/GCCdist=\1;GCCmajor=\2;GCCminor=\3/p'`
	    GCCversion="${GCCdist}.${GCCmajor}.${GCCminor}"
	}
	getGCCVersion $CCOMPILER
	CCOMP="${CCOMP}-${GCCversion}"
    fi
    test "$target" = "$TARGET" && test "$ccompiler" = "$CCOMP"
}

Note ""
Note "Checking system libraries for functionality to emulate."

FUNCS="
    strcasecmp
    strtoul
    getopt
"

for i in $FUNCS; do
    CheckForFunc $i || {
	Note "... emulate $i"
	PORTFUNCS="$PORTFUNCS $i.c"
    }
done
if [ "$PORTFUNCS" ]; then
    LIBPORT='-lport'
    PORT=yes
else
    PORT=no
fi
Note "Done checking system libraries."

Note ""

Note "Selecting programs used during installation."


#
# Miscellaneous ``little'' programs.
#
test "$CHMOD"	|| CHMOD=`findAppDef chmod $PATH chmod`
test "$LN"	|| LN=`findAppDef ln $PATH ln`
test "$SED"	|| SED=`findAppDef sed $PATH sed`
test "$STRIP"	|| STRIP=`findAppDef strip $PATH strip`

#
# Check if mv -f is supported
#
if [ -z "$MV_F" ]; then
    $RM t.c; echo "">t.c
    if mv -f t.c t.o; then
	Note "Looks like mv supports the -f option to force a move."
	MV_F=-f
    else
	Note "Warning, looks like mv has no -f option to force move operations;"
	Note "... this may cause problems during installation."
	MV_F=
    fi
fi

#
# Check if ln -s creates a symbolic link.
#
if [ -z "$LN_S" ]; then
    $RM t.c; $LN -s foo t.c && LN_S=-s
fi
if [ -n "$LN_S" ]; then
    Note "Looks like $LN supports the -s option to create a symbolic link."
else
    Note "Warning, looks like $LN has no -s option to create symbolic links;"
    Note "... this may cause problems during installation."
fi


Note "Done selecting programs."

#
# User-changable configuration parameters section.
# Anything selected here is presented to the user
# and may be interactively changed.
#

Note ""
Note "Selecting default GEOTIFF configuration parameters."
Note ""

#
# Fill in any other configuration parameters not
# setup in the site and local files.
#

gripeExecutable()
{
    echo ""
    echo "Warning, $1 does not seem to be an executable program;"
    echo "you'll need to correct this before starting up the fax server."
    echo ""
}


#
# Figure out which brand of echo we have and define
# prompt and print shell functions accordingly.
#
if [ `echo foo\\\c`@ = "foo@" ]; then
    prompt()
    {
	echo "$* \\c"
    }
elif [ "`echo -n foo`@" = "foo@" ]; then
    prompt()
    {
	echo -n "$* "
    }
else
    prompt()
    {
	echo "$*"
    }
fi

#
# Prompt the user for a string that can not be null.
#
promptForNonNullStringParameter()
{
    x="" val="$1" desc="$2"
    while [ -z "$x" ]; do
	prompt "$desc [$val]?"; read x
	if [ "$x" ]; then
	    # strip leading and trailing white space
	    x=`echo "$x" | sed -e 's/^[ 	]*//' -e 's/[ 	]*$//'`
	else
	    x="$val"
	fi
    done
    param="$x"
}



# NB: these should be sorted alphabetically
cat>>confsed<<EOF
/@AR@/s;;${AR};g
/@AROPTS@/s;;${AROPTS};g
/@CCOMPILER@/s;;${CCOMPILER};g
/@CHMOD@/s;;${CHMOD};g
/@DATE@/s;;${DATE};g
/@DIR_BIN@/s;;${DIR_BIN};g
/@DIR_INC@/s;;${DIR_INC};g
/@DIR_LIB@/s;;${DIR_LIB};g
/@DIR_LIBTIFF@/s;;${DIR_LIBTIFF};g
/@DSO@/s;;${DSO};g
/@DSOOPTS@/s;;${DSOOPTS};g
/@DSOSUF@/s;;${DSOSUF};g
/@ENVOPTS@/s;;${ENVOPTS};g
/@FILLORDER@/s;;${FILLORDER};g
/@GCOPTS@/s;;${GCOPTS};g
/@INSTALL@/s;;${INSTALL};g
/@LIBPORT@/s;;${LIBPORT};g
/@LN@/s;;${LN};g
/@LN_S@/s;;${LN_S};g
/@MACHDEPLIBS@/s;;${MACHDEPLIBS};g
/@MAKEDSOINCLUDE@/s;;${MAKEDSOINCLUDE};g
/@MANAPPS@/s;;${MANAPPS};g
/@MANAPPNAME@/s;;${MANAPPNAME};g
/@MANLIBNAME@/s;;${MANLIBNAME};g
/@MANCVT@/s;;${MANCVT};g
/@MANSEDLOCAL@/s;;${MANSEDLOCAL};g
/@MANLIB@/s;;${MANLIB};g
/@MV_F@/s;;${MV_F};g
/@PORT@/s;;${PORT};g
/@PORTFUNCS@/s;;${PORTFUNCS};g
/@RANLIB@/s;;${RANLIB};g
/@SED@/s;;${SED};g
/@SETMAKE@/s;;${SETMAKE};g
/@SRCDIR@/s;;${SRCDIR};g
/@STRIP@/s;;${STRIP};g
/@TARGET@/s;;${TARGET};g
/@VERSION@/s;;${VERSION};g
/@WARNING@/s;;Warning, this file was automatically created by the GEOTIFF configure script;g

EOF

SedConfigFiles()
{
    for F do
	test -f $SRCDIR/$F.in || {
	    gripe "$SRCDIR/$F.in is missing; this should be part of the distribution."
	    boom
	}
	dir=`echo $F | $SED 's;/[^/]*$;;'`
	if [ $dir != $F ] && [ ! -d $dir ]; then
	    Note "Creating $dir directory"
	    mkdir $dir
	fi
	suffix=`echo $F | $SED 's/.*\.//'`
	if [ "$suffix" = h ]; then
	    #
	    # Compare old and new versions so that include files
	    # are only updated when something has changed--this
	    # saves time for subsequent makes.  Note we screen
	    # out use of @DATE@ 'cuz otherwise that'll mess up
	    # the comparison (this assumes dates are used in lines
	    # of the form DATE: @DATE@).
	    #
	    $RM $F.new; $SED -f confsed $SRCDIR/$F.in > $F.new
	    $RM confx; $SED '/DATE:/d' $F.new >confx
	    $RM confy; $SED '/DATE:/d' $F >confy 2>/dev/null
	    if cmp -s confx confy >/dev/null 2>&1; then
		$RM $F.new
	    else
		Note "Creating $F from $SRCDIR/$F.in"
		$RM $F; mv $F.new $F; $CHMOD 444 $F
	    fi
	else
	    Note "Creating $F from $SRCDIR/$F.in"
	    if $SED -f confsed $SRCDIR/$F.in >$F.new; then
		$RM $F; mv $F.new $F; $CHMOD 444 $F
	    else
		cat 1>&2 <<EOF
Help, there was a problem crafting $F from $F.in.
The command:

    $SED -f confsed $SRCDIR/$F.in >$F.new

failed.  Aborting without cleaning up files so you can take a look...
EOF
		exit 1
	    fi
	fi
    done
	
}    #SedConfigFiles

#
# set up the makefiles
#
CONF_FILES="
    Makefile
    bin/Makefile
"
SedConfigFiles $CONF_FILES


Note "Done."

$RM $JUNK
exit 0
